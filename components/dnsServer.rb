#!/usr/bin/env jruby

remoteRequire 'networkHelper'
remoteRequire 'components/gnuBuild'
remoteRequire 'ioHelpers'

class DnsServer < GnuBuild

  def initialize
    super
    @settings = COMPONENT_OPTIONS.dnsServer
  end
  
  
  def alreadyInstalled?
    logger.info("Component: #{@settings.name} : Checking for presence of file '/etc/mararc' . File #{File.exists?('/etc/mararc') ? 'is' : 'is not'} present so component #{File.exists?('/etc/mararc') ? 'is' : 'is not'} already installed.")
    return File.exists?('/etc/mararc')
  end
  
  def configureBuild
    # puts "Entering DnsServer.configureBuild"
    # caller[0,5].each do |callEntry|
    #   puts "DnsServer.configureBuild #{callEntry}"
    # end
    executeWithErrorCheck do
      options = getOptions.dup
      options[:customConfigureBuildCommand] = "export PREFIX=#{@settings.buildInstallationDirectory}   ; ./configure"
      results = BuildHelper.configureBuild(@settings,options)
      @status = results[:retVal]
      { :status => @status, :errorMsg => results[:errorMsg] }
    end
  end
  
  def configure

    ipAddress = nil
    primaryDomain = nil
    
    if alreadyInstalled?
      if defined?(::DNS_PRIMARY_IP)
        ipAddress = ::DNS_PRIMARY_IP
      else
        ipAddress = NetworkHelper.getPrimaryIPAddress unless ipAddress
        if ipAddress
          puts "DnsServer.configure ipAddress #{ipAddress}"
        else
          puts "DnsServer.configure no IP address found"
        end
        userIpAddress = IOHelpers.readKeyboardWithPrompt("Enter Primary IP address (#{ipAddress})")
        if userIpAddress != ''
          ipAddress = userIpAddress
        end
      end
      if defined?(::DNS_PRIMARY_DOMAIN)
        primaryDomain = ::DNS_PRIMARY_DOMAIN
      else
        while primaryDomain.nil?
          primaryDomain = IOHelpers.readKeyboardWithPrompt("Enter Primary domain")
          if primaryDomain == ''
            primaryDomain = nil
          end
        end
      end
      mararc = <<MARARC
#Automatically generated by CommonInstaller
ipv4_bind_addresses = "#{ipAddress}"
chroot_dir = "/etc/maradns"
csv2 = {}
csv2["#{primaryDomain}."] = "db.#{primaryDomain}"

MARARC

      domainZone = <<DOMAIN_ZONE
#Automatically generated by CommonInstaller
#{primaryDomain}. #{ipAddress} ~
www.#{primaryDomain}. #{ipAddress} ~
DOMAIN_ZONE

      puts "mararc \n#{mararc}"
      puts "domainZone \n#{domainZone}"
      
      { :status => SUCCESS }
    end
    
  end
end
