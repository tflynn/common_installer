#!/bin/bash

BOOTSTRAP_VERSION=0.1

# Constants

TRUE='true'
FALSE="false"
OSX='osx'
LINUX='linux'
UNKNOWN='unknown'

BOOTSTRAP_INSTALLER_PROXY=${0}_proxy
BOOTSTRAP_INSTALLER_DEFAULTS_FILENAME=bootstrap_installer.defaults
BOOTSTRAP_INSTALLER_SETTINGS_FILENAME=bootstrap_installer.settings
BOOTSTRAP_INSTALLER_LOG_FILENAME=bootstrap_installer.log
BOOTSTRAP_INSTALLER_TOP_LEVEL_INSTALLATION_DIRECTORY=/opt1
BOOTSTRAP_INSTALLER_SOURCE_REPOSITORY=http://dl.dropbox.com/u/12189743/InstallationFiles
BOOTSTRAP_PHASE=1

# Settings
GCC_MINIMUM_VERSION_MAJOR=4
GCC_MINIMUM_VERSION_MINOR=1

#
# Linux Package Managers
#

# Redhat-derived
LINUX_INSTALLER_YUM='yum'
LINUX_INSTALLER_RPM='rpm'
# Debian
LINUX_INSTALLER_APTITUDE='aptitude'
# Gentoo
LINUX_INSTALLER_PORTAGE='portage'

# Installer type to exec
INSTALLER_EXEC_TYPE_LUA='lua'
INSTALLER_EXEC_TYPE_JRUBY='jruby'
INSTALLER_EXEC_TYPE=${INSTALLER_EXEC_TYPE_JRUBY}

JRUBY_DIST=jruby-bin-1.5.6.tar.gz
JRUBY_INSTALL_DIR=/usr/local/jruby-1.5.6

function dateStamp() {
  _dateStamp=`date "+%Y-%m-%d %H:%M:%S"`
}

function msgNoDateStamp() {
  if [[ X"$1" != X ]] ; then
    echo "$1"
    echo "$1" >> ${BOOTSTRAP_INSTALLER_LOG_FILENAME}
  fi
}

function msg() {
  dateStamp
  if [[ X"$1" != X ]] ; then
    echo "${_dateStamp} ""$1"
    echo "${_dateStamp} ""$1" >> ${BOOTSTRAP_INSTALLER_LOG_FILENAME}
  fi
}

function errorMsg() {
  if [[ X"$1" != X ]] ; then
    msg "ERROR: $1"
  fi
}

function debugMsg() {
  if [[ X"$1" != X ]] ; then
    msg "DEBUG: $1"
  fi
}

function infoMsg() {
  if [[ X"$1" != X ]] ; then
    msg "INFO: $1"
  fi
}

function standardExit() {
  _exit_code=0
  _exit_message=$1
  commonExit
}

function errorExit() {
  _exit_code=1
  _exit_message=$1
  commonExit
}

function commonExit() {
  if [[ X"${_exit_code}" == X ]] ; then
    _exit_code=0
  fi
  if [[ X"${_exit_message}" == X ]] ; then
    _exit_message=''
  fi
  if [[ _exit_code > 0 ]] ; then
    errorMsg "${_exit_message}"
  else
    infoMsg "${_exit_message}"
  fi
  exit ${_exit_code}
}

# Get the current user
# Returns user name
function getUser() {
  _result=`whoami`
}

# Is the current user root?
# Returns TRUE if root, FALSE otherwise
function isUserRoot() {
  getUser
  if [[ X"$_result" == Xroot ]] ; then
    _result=$TRUE
  else
    _result=$FALSE
  fi
}

# Ensure the script is being run as root
function ensureUserRoot() {
  isUserRoot
  if [[ $_result != $TRUE ]] ; then
    errorExit "This script must be run as the root user. Exiting ..."
  fi
}

# Is the current user root running as sudo?
# Returns TRUE if root as sudo, FALSE otherwise
function isUserRootAsSudo() {
  sudo_root_user=`who am i | cut -f1 -d ' '`
  getUser
  current_user=$_result
  if [[ X"$current_user" == Xroot ]] && [[ X"$sudo_root_user" != Xroot ]] ; then
    _result=$TRUE
  else
    _result=$FALSE
  fi
}

# Ensure the script is being run as root running as sudo.
function ensureUserRootAsSudo() {
  isUserRootAsSudo
  if [[ $_result != $TRUE ]] ; then
    errorExit "This script must be run using 'sudo' from a regular account. Please rerun. Exiting ..."
  fi
}
# Clear any settings saved from last run
function clearSavedSettings() {
  if [[ -e ${BOOTSTRAP_INSTALLER_SETTINGS_FILENAME} ]] ; then
    rm -f ${BOOTSTRAP_INSTALLER_SETTINGS_FILENAME}
  fi
}

# Check command-line options
function checkOptions() {
  #echo "Num args ${#}"
  if [[ "$#" == "0" ]]; then
    return
  fi

  while (( "$#" )); do
    case $1 in
      '-h') 
          help
          standardExit
          ;;
      '--bootstrap-phase')
          shift
          BOOTSTRAP_PHASE=$1
          ;;
    esac
    shift
  done

}

function help() {
# By default, this installer will move itself itself into a directory 'bootstrap_installer' in the current directory. 
# This is equivalent to the command-line option '-m yes'. You can disable this behavior by specifying '-m no' on the command line.
# BOOTSTRAP_INSTALLER_DIRECTORY=bootstrap_installer
  
  read -d '' HELP <<'HELP_TEXT'
Bootstrap Installer Help

This bootstrap installer will bootstrap an installation environment on RedHat 5, Centos 5 or OS X.

This installer must be run as root or as a sudo user.

When installing components, everything is installed relative to the directory specified by the
value BOOTSTRAP_INSTALLER_TOP_LEVEL_INSTALLATION_DIRECTORY, by default /opt1. This allows all installed components
to be removed using a single command - e.g. rm -rf /opt1

To change the default settings for the script, place the settings in a file named "bootstrap_installer.defaults" 
in the same directory as this file (bootstrap_installer).

Available settings:

BOOTSTRAP_INSTALLER_SETTINGS_FILENAME=bootstrap_installer.settings
BOOTSTRAP_INSTALLER_SETTINGS_FILENAME=bootstrap_installer.log
BOOTSTRAP_INSTALLER_TOP_LEVEL_INSTALLATION_DIRECTORY=/opt1
BOOTSTRAP_INSTALLER_SOURCE_REPOSITORY=http://dl.dropbox.com/u/12189743/InstallationFiles

GCC_MINIMUM_VERSION_MAJOR=4
GCC_MINIMUM_VERSION_MINOR=1


HELP_TEXT
  echo " "
  echo "$HELP"
  echo " "
}

function startupMsg() {
  if [[ X${BOOTSTRAP_PHASE} != X1 ]] ; then
    return
  fi
  echo "Bootstrap Installer ${BOOTSTRAP_VERSION} - './bootstrap_installer -h' for help"
  echo " "
}


# Load settings file if present
# Settings file is named 'bootstrap_installer.settings'
function loadDefaultSettings() {
  if [ -e ${BOOTSTRAP_INSTALLER_DEFAULTS_FILENAME} ] ; then
    echo "Loading settings from ${BOOTSTRAP_INSTALLER_DEFAULTS_FILENAME}"
    source ${BOOTSTRAP_INSTALLER_DEFAULTS_FILENAME}
  #else
    #echo "No settings file (${BOOTSTRAP_INSTALLER_SETTINGS_FILENAME}) found. Skipping .." 
  fi
}

# Get the system type
# Returns 'LINUX', 'OSX' or 'UNKNOWN'
function getSystemType() {
  uname -a | grep -q -i linux
  if [[ $? == 0 ]] ; then
    _result=$LINUX
  else
    uname -a | grep -q -i darwin
    if [[ $? == 0 ]] ; then
      _result=$OSX
    else
      _result=$UNKNOWN
    fi
  fi
}


# Get the Linux installer type
# Based on the presence of particular installers
# Returns $LINUX_INSTALLER_YUM, $LINUX_INSTALLER_RPM, $LINUX_INSTALLER_APTITUDE, $LINUX_INSTALLER_PORTAGE or $UNKNOWN
function getLinuxInstallerType() {
  isCommandPresent 'yum'
  if [[ X"$_result" == X$TRUE ]] ; then
    _result=$LINUX_INSTALLER_YUM
  else
    isCommandPresent 'rpm'
    if [[ X"$_result" == X$TRUE ]] ; then
      _result=$LINUX_INSTALLER_RPM
    else
      isCommandPresent 'aptitude'
      if [[ X"$_result" == X$TRUE ]] ; then
        _result=$LINUX_INSTALLER_APTITUDE
      else
        isCommandPresent 'emerge'
        if [[ X"$_result" == X$TRUE ]] ; then
          _result=$LINUX_INSTALLER_PORTAGE
        else
          _result=$UNKNOWN
        fi
      fi
    fi
  fi
}


# Checks to see if a command is present using 'which'
# Returns :true if command present :false otherwise
function isCommandPresent() {
  if [[ X"$1" == X ]] ; then
    _result=$FALSE
  else
    _cmd="which ${1}"
    _cmdOutput=`${_cmd}`
    _cmdStatus=$?
    #echo "isCommandPresent _cmd ${_cmd} _cmdOutput ${_cmdOutput} _cmdStatus ${_cmdStatus} "
    if [[ ${_cmdStatus} == 0 ]] ; then
      _result=$TRUE
    else
      _result=$FALSE
    fi
  fi
}

# Install some version of GCC using YUM
function installGCC_YUM() {
  infoMsg "Attempting to install GCC using yum"
  yum -y install gcc gcc-c++
  _cmdStatus=$?
  if [[ ${_cmdStatus} != 0 ]] ; then
    errorMsg "Please install GCC and GCC C++ manually and rerun this installer. Leaving ..."
    exit 1
  fi
}

# Install some version of GCC
function installGCC() {
  getSystemType
  local systemType=$_result
  if [[ $systemType == $LINUX ]] ; then
    getLinuxInstallerType
    local linuxInstallerType=$_result
    if [[ $linuxInstallerType == $LINUX_INSTALLER_YUM ]] ; then
      installGCC_YUM  
    else
      errorMsg "'gcc' or 'gcc=c++' missing. Please install both of these manually and rerun this installer. Leaving ..."
      exit 1
    fi
  else
    if [[ $systemType == $OSX ]] ; then
      errorMsg "'gcc' or 'gcc=c++' missing. Please install Developer tools and ensure your system is up to date with all updates installed and rerun this installer. Leaving ..."
      exit 1
    fi
  fi
}

# Is GGC present at the minimum required version?
# Returns :true if GCC present at the minimum version, :false otherwise
function ensureGCCMinimumVersion() {
  isCommandPresent 'gcc'
  local gccPresent=${_result}
  isCommandPresent 'g++'
  local cppPresent=${_result}
  local correctVersion=$FALSE
  local bothFound=$FALSE
  if [[ $gccPresent == $TRUE  && $cppPresent == $TRUE ]] ; then
    infoMsg "Found gcc and g++"
    bothFound=$TRUE
    local versionString=`gcc --version | awk 'NR == 1 {print $0 }' | cut -f3 -d ' '`
    local majorVersion=`echo ${versionString} | cut -f1 -d '.'`
    local minorVersion=`echo ${versionString} | cut -f2 -d '.'`
    infoMsg "Checking version of gcc. Found ${majorVersion}.${minorVersion}"
    if [[ $majorVersion < $GCC_MINIMUM_VERSION_MAJOR ]] ; then
      correctVersion=$FALSE
    else 
      if [[ $majorVersion == $GCC_MINIMUM_VERSION_MAJOR ]] ; then
        if [[ $minorVersion < $GCC_MINIMUM_VERSION_MINOR ]] ; then
          correctVersion=$FALSE
        else
          correctVersion=$TRUE
        fi
      else
        correctVersion=$TRUE
      fi
    fi
  else
    infoMsg "gcc or g++ not found"
  fi
  if [[ $correctVersion == $TRUE ]] ; then
    infoMsg "Acceptable gcc version found. It is at least at ${GCC_MINIMUM_VERSION_MAJOR}.${GCC_MINIMUM_VERSION_MINOR}."
  else
    if [[ $bothFound == $TRUE ]] ; then
      infoMsg "gcc must be at least at version ${GCC_MINIMUM_VERSION_MAJOR}.${GCC_MINIMUM_VERSION_MINOR}."
    fi
    installGCC
  fi

}

# Ensure make is present
function ensureMakePresent() {
  isCommandPresent 'make'
  local makePresent=${_result}
  if [[ $makePresent == $TRUE ]] ; then
    infoMsg "Found make"
  else
    infoMsg "make is not present. Attempting to install make"
    installMake
  fi
}

# Install make
function installMake() {
  getSystemType
  local systemType=$_result
  if [[ $systemType == $LINUX ]] ; then
    getLinuxInstallerType
    local linuxInstallerType=$_result
    if [[ $linuxInstallerType == $LINUX_INSTALLER_YUM ]] ; then
      installMake_YUM  
    else
      errorMsg "'make' missing. Please install 'make' manually and rerun this installer. Leaving ..."
      exit 1
    fi
  else
    if [[ $systemType == $OSX ]] ; then
      errorMsg "'make' missing. Please install Developer tools and ensure your system is up to date with all updates installed and rerun this installer. Leaving ..."
      exit 1
    fi
  fi
}

# Install some version of make using YUM
function installMake_YUM() {
  infoMsg "Attempting to install make using yum"
  yum -y install make
  _cmdStatus=$?
  if [[ ${_cmdStatus} == 0 ]] ; then
    infoMsg "Successfully installed make"
  else
    errorMsg "Please install make manually and rerun this installer. Leaving ..."
    exit 1
  fi
}

# Ensure CURL is present - only used to get wget
function ensureCurlPresent() {
  isCommandPresent 'curl'
  local curlPresent=${_result}
  if [[ $curlPresent == $TRUE ]] ; then
    infoMsg "curl found"
  else
    infoMsg "curl is not present. Attempting to install curl"
    installCurl
  fi
}


# Install Curl
function installCurl() {
  getSystemType
  local systemType=$_result
  if [[ $systemType == $LINUX ]] ; then
    getLinuxInstallerType
    local linuxInstallerType=$_result
    if [[ $linuxInstallerType == $LINUX_INSTALLER_YUM ]] ; then
      installCurl_YUM  
    else
      errorMsg "Please install curl manually rerun this installer. Leaving ..."
      exit 1
    fi
  else
    if [[ $systemType == $OSX ]] ; then
      errorMsg "Please install curl manually from sources and rerun this installer. Leaving ..."
      exit 1
    fi
  fi
}

# Install some version of curl using YUM
function installCurl_YUM() {
  infoMsg "Attempting to install curl using yum"
  yum -y install curl
  _cmdStatus=$?
  if [[ ${_cmdStatus} == 0 ]] ; then
    infoMsg "Successfully installed curl"
  else
    errorMsg "Please install curl manually and rerun this installer. Leaving ..."
    exit 1
  fi
}


# Ensure wget is present
function ensureWgetPresent() {
  isCommandPresent 'wget'
  local wgetPresent=${_result}
  if [[ $wgetPresent == $TRUE ]] ; then
    infoMsg "Found wget"
  else
    infoMsg "wget is not present. Attempting to install wget"
    installWget
  fi
}

# Install wget
function installWget() {
  installGnuPackage ${BOOTSTRAP_INSTALLER_TOP_LEVEL_INSTALLATION_DIRECTORY} ${BOOTSTRAP_INSTALLER_SOURCE_REPOSITORY}/wget/wget-1.12.tar.gz curl
}

# Install a standard GNU package
function installGnuPackage() {
  local baseInstallDir=$1
  local fileURI=$2
  local fetchType=$3
  infoMsg "Installing standard GNU package ${fileURI} to ${baseInstallDir}"
  local fullFileName=$(basename $fileURI)
  local fileName=`echo $fullFileName | sed -e 's/.tar.gz//' | sed -e 's/.tgz//' | sed -e 's/.zip//'`
  #echo "baseInstallDir ${baseInstallDir} fileURI ${fileURI} fetchType ${fetchType} fullFileName ${fullFileName} fileName ${fileName}"
  mkdir -p ${baseInstallDir}/src
  pushd ${baseInstallDir}/src
  rm -rf $fullFileName
  if [[ X${fetchType} == Xcurl ]] ; then
    curl -o $fullFileName $fileURI
  fi
  if [[ X${fetchType} == Xwget ||  X${fetchType} == X ]] ; then
    wget $fileURI
  fi
  unpack $fullFileName
  pushd $fileName
  ./configure --prefix=$baseInstallDir
  make
  make install
  popd
  popd
}

# Unpack an archive
function unpack() {
  local fullFileName=$1
  local result
  result=`echo ${fullFileName} | grep -c 'gz'`
  if [[ X"$result" != X0 ]] ; then
    tar xzf ${fullFileName}
  fi
  result=`echo ${fullFileName} | grep -c 'zip'`
  if [[ X"$result" != X0 ]] ; then
    unzip ${fullFileName}
  fi
}


# Restart this script with an appropriate environment
function restartWithEnvironment() {
  #TODO Add path to PATH in /etc/profile or ~/bash_profile
  if [[ X${BOOTSTRAP_PHASE} != X1 ]] ; then
    return
  fi
  if [[ -e ${BOOTSTRAP_INSTALLER_PROXY} ]] ; then
    rm -rf ${BOOTSTRAP_INSTALLER_PROXY}
  fi
  updateExternalConfigurations
  infoMsg "Restarting with correct environment PATH=\"${BOOTSTRAP_INSTALLER_TOP_LEVEL_INSTALLATION_DIRECTORY}/bin:${PATH}\"" 
  echo "#!/usr/bin/env bash " > ${BOOTSTRAP_INSTALLER_PROXY}
  if [[ ${INSTALLER_EXEC_TYPE} == ${INSTALLER_EXEC_TYPE_JRUBY} ]] ; then
    echo "export PATH=\"${JRUBY_INSTALL_DIR}/bin:${PATH}\"" >> ${BOOTSTRAP_INSTALLER_PROXY}
  else
    echo "export PATH=\"${BOOTSTRAP_INSTALLER_TOP_LEVEL_INSTALLATION_DIRECTORY}/bin:${PATH}\"" >> ${BOOTSTRAP_INSTALLER_PROXY}
  fi
  echo "$0 --bootstrap-phase 2 " >> ${BOOTSTRAP_INSTALLER_PROXY}
  chmod a+x ${BOOTSTRAP_INSTALLER_PROXY}
  exec ./${BOOTSTRAP_INSTALLER_PROXY}
}

# Add configuration information to external locations
function updateExternalConfigurations() {
  addBinDirToUserProfile
}

# Add INSTALLATION bin directory to suitable user profile
function addBinDirToUserProfile() {
  local bashProfile=${HOME}/.bash_profile
  local dotProfile=${HOME}/.profile
  if [[ -e $bashProfile ]] ; then
    #echo "addBinDirToUserProfile found $bashProfile"
    addBinDirPathToFile $bashProfile
  else
    if [[ -e $dotProfile ]] ; then
      #echo "addBinDirToUserProfile found $dotProfile"
      addBinDirPathToFile $dotProfile
    fi
  fi
}

# Add INSTALLATION bin directory to specified file if not present
function addBinDirPathToFile() {
  local file=$1
  local binDir="${BOOTSTRAP_INSTALLER_TOP_LEVEL_INSTALLATION_DIRECTORY}/bin"
  #echo "addBinDirPathToFile '$file'  '$binDir'"
  local cmdFile='grep.sh'
  if [[ X$file != X ]] ; then
    grepInFile ${binDir} ${file}
    local grepOut=${_result}
    if [[ X$grepOut == X0 ]] ; then
      echo "export PATH=${binDir}:$""{""PATH""}"" # Added by bootstrap_installer" >> ${file}
      infoMsg "Added the following line to ${file}"
      msgNoDateStamp "export PATH=${binDir}:$""{""PATH""}"" # Added by bootstrap_installer"
    fi
  fi
}

# Go find a string in a file using grep
# Why do it this way? - Because I can't figure out the correct escape sequences for paths like '/opt1/bin' 
# when they're directly in this file
function grepInFile() {
  local pattern=$1
  local file=$2
  #echo "grepInFile pattern ${pattern} file ${file}"
  local cmdFile='grep.sh'
  if [[ X$pattern != X  && X$file != X ]] ; then
    rm -rf ${cmdFile}
    echo "#!/usr/bin/env bash" >> ${cmdFile}
    echo "grep -c '${pattern}' ${file}" >> ${cmdFile}
    #cat ${cmdFile}
    chmod a+x ${cmdFile}
    _result=`./${cmdFile}`
    #echo "grepInFile _result ${_result}"
    rm -rf ${cmdFile}
  else
    _result=0
  fi
}

# Add appropriate entries to ld.so.conf and rerun ldconfig
function configureLdconfig() {
  getSystemType
  local systemType=$_result
  if [[ $systemType == $LINUX ]] ; then
    local libDir="${BOOTSTRAP_INSTALLER_TOP_LEVEL_INSTALLATION_DIRECTORY}/lib"
    local libDirUsrLocalLib='/usr/local/lib'
    local libDirUsrLib64='/usr/lib64'
    local ld_config_so_file='/etc/ld.so.conf'
    grepInFile ${libDirUsrLocalLib} ${ld_config_so_file}
    local grepOut=${_result}
    if [[ X$grepOut == X0 ]] ; then
      echo ${libDirUsrLocalLib} >> ${ld_config_so_file}
      infoMsg "Adding ${libDirUsrLocalLib} to ${ld_config_so_file}"
    fi
    local cpuType=`uname -a | grep -q -i x86_64`
    if [[ $? == 0 ]] ; then
      grepInFile ${libDirUsrLib64} ${ld_config_so_file}
      local grepOut=${_result}
      if [[ X$grepOut == X0 ]] ; then
        echo ${libDirUsrLib64} >> ${ld_config_so_file}
        infoMsg "Adding ${libDirUsrLib64} to ${ld_config_so_file}"
      fi
    fi
    grepInFile ${libDir} ${ld_config_so_file}
    local grepOut=${_result}
    if [[ X$grepOut == X0 ]] ; then
      echo ${libDir} >> ${ld_config_so_file}
      infoMsg "Adding ${libDir} to ${ld_config_so_file}"
    fi
    local ldconfigBin=`which ldconfig`
    ${ldconfigBin}
  fi
}

# Install Lua dependencies
function installLuaDependencies() {
  configureLdconfig
  getSystemType
  local systemType=$_result
  if [[ $systemType == $LINUX ]] ; then
    local cpuType=`uname -a | grep -q -i x86_64`
    local cpu64=$FALSE
    if [[ $? == 0 ]] ; then
      cpu64=$TRUE
    fi
    if [[ $cpu64 == $TRUE ]] ; then
      if [[ -e /usr/lib64/libncurses.so.5 ]] ; then
        if [[ ! -e /usr/lib64/libncurses.so ]] ; then
          ln -s /usr/lib64/libncurses.so.5 /usr/lib64/libncurses.so
          infoMsg "Linking /usr/lib64/libncurses.so.5 to /usr/lib64/libncurses.so"
        fi
      fi
    fi
    getLinuxInstallerType
    local linuxInstallerType=$_result
    if [[ $linuxInstallerType == $LINUX_INSTALLER_YUM ]] ; then
      local readlineDevelInstalled=`yum list installed | grep readline_devel`
      if [[ X${readlineDevelInstalled} == X ]] ; then
        yum -y install readline-devel
        infoMsg "Installing readline-devel using yum"
      fi
    else
      errorMsg "Please install readline development libraries manually and rerun this installer"
      exit 1
    fi
  fi
}

# Install Lua
function ensureLuaPresent() {
  isCommandPresent 'lua'
  local luaPresent=${_result}
  if [[ ${luaPresent} == $FALSE ]] ; then
    installLuaDependencies
    local baseInstallDir=${BOOTSTRAP_INSTALLER_TOP_LEVEL_INSTALLATION_DIRECTORY}
    local fileURI=${BOOTSTRAP_INSTALLER_SOURCE_REPOSITORY}/lua/lua-5.1.4.tar.gz
    infoMsg "Installing Lua package ${fileURI} to ${baseInstallDir}"
    local fullFileName=$(basename $fileURI)
    local fileName=`echo $fullFileName | sed -e 's/.tar.gz//' | sed -e 's/.tgz//' | sed -e 's/.zip//'`
    #echo "baseInstallDir ${baseInstallDir} fileURI ${fileURI} fetchType ${fetchType} fullFileName ${fullFileName} fileName ${fileName}"
    mkdir -p ${baseInstallDir}/src
    pushd ${baseInstallDir}/src
    rm -rf $fullFileName
    wget $fileURI
    unpack $fullFileName
    pushd $fileName
    mv Makefile Makefile.bak
    echo "s%/usr/local%"${baseInstallDir}"%" >pattern.sed
    sed -f pattern.sed <Makefile.bak >Makefile
    rm -f pattern.sed
    getSystemType
    local systemType=$_result
    if [[ ${systemType} == $LINUX ]] ; then
      make linux
    fi
    if [[ ${systemType} == $OSX ]] ; then
      make macosx
    fi
    make install
    popd
    popd
  else
    infoMsg "Found lua"
  fi
}

function getAndRunLuaInstaller() {
  infoMsg "Obtaining mainInstaller.lua from ${BOOTSTRAP_INSTALLER_SOURCE_REPOSITORY}/common_installer/mainInstaller.lua"
  wget ${BOOTSTRAP_INSTALLER_SOURCE_REPOSITORY}/common_installer/mainInstaller.lua
  if [[ $? != 0 ]] ; then
    errorMsg "Unable to execute command \"wget ${BOOTSTRAP_INSTALLER_SOURCE_REPOSITORY}common_installer/mainInstaller.lua\". Leaving ..."
    exit 1
  fi
  chmod a+x ./mainInstaller.lua
  infoMsg "About to run mainInstaller.lua"
  #TODO pass necessary settings
  exec ./mainInstaller.lua --logfile ${BOOTSTRAP_INSTALLER_LOG_FILENAME}
}

function ensureJRubyPresent() {
  isCommandPresent 'java'
  local javaPresent=${_result}
  if [[ ${javaPresent} == $FALSE ]] ; then
    getSystemType
    local systemType=$_result
    if [[ $systemType == $LINUX ]] ; then
      getLinuxInstallerType
      local linuxInstallerType=$_result
      if [[ $linuxInstallerType == $LINUX_INSTALLER_YUM ]] ; then
        infoMsg "Attempting to install Java using yum"
        yum -y install java
        _cmdStatus=$?
        if [[ ${_cmdStatus} != 0 ]] ; then
          errorMsg "Please install Java manually and rerun this installer. Leaving ..."
          exit 1
        fi
      else
        errorMsg "'java' missing. Please install Java 6 (1.6.x) manually and rerun this installer. Leaving ..."
        exit 1
      fi
    else
      if [[ $systemType == $OSX ]] ; then
        errorMsg "'java' missing. Please install Developer tools and ensure your system is up to date with all updates installed and rerun this installer. Leaving ..."
        exit 1
      fi
    fi
  fi
  
  # Check Java version
  local versionString=`java -version | awk 'NR == 1 {print $0 }' | sed -e 's/\"//' | cut -f3 -d ' '`
  local majorVersion=`echo ${versionString} | cut -f1 -d '.'`
  local minorVersion=`echo ${versionString} | cut -f2 -d '.'`
  infoMsg "Checking version of java. Found ${majorVersion}.${minorVersion}"
  if [[ X${majorVersion} == X1 && X${minorVersion} == X6 ]] ; then
    infoMsg "Found acceptable version of java (${majorVersion}.${minorVersion})"
    infoMsg "Installing JRuby package  ${JRUBY_DIST} from ${BOOTSTRAP_INSTALLER_SOURCE_REPOSITORY}/jruby/${JRUBY_DIST}"
    wget ${BOOTSTRAP_INSTALLER_SOURCE_REPOSITORY}/jruby/${JRUBY_DIST}
    if [[ $? !=  0 ]] ; then
      errorMsg "Unable to fetch JRuby from ${BOOTSTRAP_INSTALLER_SOURCE_REPOSITORY}/jruby/${JRUBY_DIST}. Please install JRuby 1.5.6 manually and rerun this installer. Leaving ..."
      exit 1
    fi
    tar xzf ${JRUBY_DIST}
    if [[ $? !=  0 ]] ; then
      errorMsg "Unable to unpack ${JRUBY_DIST}. Please install JRuby 1.5.6 manually and rerun this installer. Leaving ..."
      exit 1
    fi
    infoMsg "Moving JRuby to ${JRUBY_INSTALL_DIR}"
    rm -rf ${JRUBY_INSTALL_DIR}
    mv jruby-1.5.6 /usr/local
  else
    errorMsg "Java 6 (1.6.x) is required but was not found. Please install Java 6 manually and rerun this installer. Leaving ..."
    exit 1
  fi
}

function getAndRunJRubyInstaller() {
  infoMsg "Obtaining mainInstaller.rb from ${BOOTSTRAP_INSTALLER_SOURCE_REPOSITORY}/common_installer/mainInstaller.rb"
  wget ${BOOTSTRAP_INSTALLER_SOURCE_REPOSITORY}/common_installer/mainInstaller.rb
  if [[ $? != 0 ]] ; then
    errorMsg "Unable to execute command \"wget ${BOOTSTRAP_INSTALLER_SOURCE_REPOSITORY}common_installer/mainInstaller.rb\". Leaving ..."
    exit 1
  fi
  chmod a+x ./mainInstaller.rb
  infoMsg "About to run mainInstaller.rb"
  #TODO pass necessary settings
  exec ./mainInstaller.rb --logfile ${BOOTSTRAP_INSTALLER_LOG_FILENAME}
}

#
# Bootstrap the system
#


function bootstrap() {
 
  loadDefaultSettings
  checkOptions $@
  startupMsg
  ensureUserRoot
  restartWithEnvironment
  clearSavedSettings
  
  ensureGCCMinimumVersion
  ensureMakePresent
  ensureWgetPresent
  if [[ ${INSTALLER_EXEC_TYPE} == ${INSTALLER_EXEC_TYPE_LUA} ]] ; then
    ensureLuaPresent
    getAndRunLuaInstaller
  else
    if [[ ${INSTALLER_EXEC_TYPE} == ${INSTALLER_EXEC_TYPE_JRUBY} ]] ; then
      ensureJRubyPresent
      getAndRunJRubyInstaller
    else
      errorMsg "Didn't find any supported installer configured. Leaving ..."
      exit 1
    fi
  fi
}

bootstrap $@


